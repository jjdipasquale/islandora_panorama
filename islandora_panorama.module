<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

/**
 * Implements hook_menu().
 */
function islandora_panorama_menu() {
  return array(
    'admin/islandora/solution_pack_config/panorama' => array(
      'title' => 'Panorama Solution Pack',
      'description' => 'Select viewers and configure ingest behavior.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_panorama_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/object/%islandora_object/cubes' => array(
      'title' => 'Cube Faces',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_panorama_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_user_access',
      'access arguments' => array(
        2, array(ISLANDORA_VIEW_OBJECTS), array('islandora:panoramaCModel'),
      ),
    ),
    'islandora/object/%islandora_object/manage/panorama' => array(
      'title' => 'Panorama and Cube Faces',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_pages_access_callback',
      'access arguments' => array(2, array('islandora:panoramaCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/panorama/ingest' => array(
      'title' => 'Add Face',
      'page callback' => 'islandora_panorama_ingest_page',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file' => 'includes/manage_panorama.inc',
    ),
    'islandora/object/%islandora_object/manage/panorama/ingest_zipped' => array(
      'title' => 'Add Zipped Cube Faces (6 images)',
      'page callback' => 'islandora_paged_content_ingest_zipped_pages',
      'page arguments' => array(2,
        array('tif', 'tiff', 'jpg', 'jpeg', 'jp2'),
        'islandora:pageCModel'),
        //variable_get('islandora_panorama_ingest_derivatives', array('ocr')),
      //),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/panorama_page' => array(
      'title' => 'Cube Face',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_page_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_page_access_callback',
      'access arguments' => array(2, array('islandora:pageCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_page.inc',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_panorama_theme() {
  return array(
    'islandora_panorama_panorama' => array(
      'variables' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-panorama-panorama',
    ),
    'islandora_panorama_page' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-panorama-page',
    ),
    'islandora_panorama_page_img_print' => array(
      'template' => 'theme/islandora-panorama-page-img-print',
      'variables' => array('islandora_content' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function islandora_panorama_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_panorama_mods_form' => array(
      'content_model' => 'islandora:panoramaCModel',
      'form_name' => 'Islandora Panorama MODS Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_panorama_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_panorama');
  return array('Islandora Panorama MODS Form' => array('form_file' => "$module_path/data/forms/panorama_form_mods.xml"));
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_panorama_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_panorama');
  $datastreams_path = "$module_path/data/datastreams";
  // Page Content Model.
  $page_content_model = $connection->repository->constructObject('islandora:pageCModel');
  $page_content_model->owner = 'fedoraAdmin';
  $page_content_model->label = 'Islandora Page Content Model';
  $page_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $page_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $paged_content_path = drupal_get_path('module', 'islandora_paged_content');
  $datastream->setContentFromFile("$paged_content_path/xml/islandora_pageCModel_ds_composite_model.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // Panorama Content Model.
  $panorama_content_model = $connection->repository->constructObject('islandora:panoramaCModel');
  $panorama_content_model->owner = 'fedoraAdmin';
  $panorama_content_model->label = 'Islandora Panorama Content Model';
  $panorama_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $panorama_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_panoramaCModel_ds_composite_model.xml", FALSE);
  $panorama_content_model->ingestDatastream($datastream);
  // Panorama Collection.
  $panorama_collection = $connection->repository->constructObject('islandora:panoramaCollection');
  $panorama_collection->owner = 'fedoraAdmin';
  $panorama_collection->label = 'Panorama Collection';
  $panorama_collection->models = 'islandora:collectionCModel';
  $panorama_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $panorama_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_panorama_collection_policy.xml", FALSE);
  $panorama_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $panorama_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $panorama_collection->ingestDatastream($datastream);
  return array(
    'islandora_panorama' => array(
      'title' => 'Islandora panorama',
      'objects' => array(
        $page_content_model,
        $panorama_content_model,
        $panorama_collection,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_panorama_islandora_panoramacmodel_islandora_view_object($object) {
  $output = theme('islandora_panorama_panorama', array('object' => $object));
  return array('islandora_panorama' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_panorama_islandora_pagecmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_panorama_page', array('object' => $object));
  return array('islandora_panorama' => $output);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_panorama_islandora_pagecmodel_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['panorama'])) {
    return;
  }
  return array(
    'islandora_panorama_upload_pages' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_paged_content_upload_page_form',
      'args' => array($shared_storage['panorama']),
      'module' => 'islandora_paged_content',
      'file' => 'includes/upload_page.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_panorama_islandora_panoramacmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_paged_object_derivatives('islandora_panorama');
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_panorama_islandora_pagecmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_page_derivatives('islandora_panorama');
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_panorama_form_islandora_object_properties_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:panoramaCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Panorama');
  }
}

/**
 * Implements hook_form_islandora_delete_object_form_alter().
 */
function islandora_panorama_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:panoramaCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the panorama object and all related page objects. This action cannot be undone.');
    $form['#submit'][] = 'islandora_panorama_islandora_delete_object_form_delete_pages_submit';
    if (($key = array_search('islandora_delete_object_form_submit', $form['#submit'])) !== FALSE) {
      unset($form['#submit'][$key]);
    }
  }
}

/**
 * Delete all the page objects related to the panorama object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_panorama_islandora_delete_object_form_delete_pages_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $object = $form_state['object'];
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  $batch_delete = islandora_paged_content_delete_pages_batch($object, $pages);
  $batch_delete['operations'][] = array('islandora_paged_content_delete_parent_object_operation', array($object->id));
  batch_set($batch_delete);
  $parents = islandora_get_parents_from_rels_ext($object);
  $parent = array_pop($parents);
  $form_state['redirect'] = isset($parent) ? "islandora/object/{$parent->id}" : 'islandora';
}

/**
 * Renders the Pages local menu task.
 *
 * @param AbstractObject $object
 *   The panorama object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given panoramas pages.
 */
function islandora_panorama_pages_menu(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  drupal_set_breadcrumb(islandora_get_breadcrumbs($object));
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $pages = islandora_paged_content_get_pages($object);
  return theme('islandora_objects', array('objects' => array_keys($pages)));
}

/**
 * Implements hook_islandora_update_related_objects_properties().
 */
function islandora_panorama_islandora_panoramaCModel_islandora_update_related_objects_properties($object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  return $pages;
}

/**
 * Implements hook_islandora_xacml_editor_child_query().
 */
function islandora_panorama_islandora_panoramaCModel_islandora_xacml_editor_child_query(AbstractObject $object) {
  $pages_query = <<<EOQ
SELECT ?object from <#ri> WHERE
{
  ?object <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}>
}
EOQ;
  return array(
    'panorama_pages' => array(
      'type' => 'sparql',
      'query' => $pages_query,
      'description' => t('All images of this panorama (existing and new).'),
      'recurse' => TRUE,
    ),
  );
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_panorama_islandora_view_print_object($object) {
  if (in_array('islandora:pageCModel', $object->models)) {
    // Theme image separately.
    $islandora_content = theme('image', array(
      'title' => $object->label,
      'path' => url("islandora/object/{$object->id}/datastream/JPG/view"),
    ));
    return theme('islandora_panorama_page_img_print', array(
      'islandora_content' => $islandora_content,
    ));
  }
}

/**
 * HOOK_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function islandora_panorama_islandora_pagecmodel_techmd_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('module', 'islandora_fits');
  $techmd = $datastream->content;
  $xml = new SimpleXMLElement($techmd);
  $fits_metadata = islandora_fits_child_xpath($xml);
  $unit = isset($fits_metadata['Jhove']['Sampling Frequency Unit'][0]) ? $fits_metadata['Jhove']['Sampling Frequency Unit'][0] : 'ins.';
  $xcount = isset($fits_metadata['Jhove']['X Sampling Frequency'][0]) ? $fits_metadata['Jhove']['X Sampling Frequency'][0] : '600';
  $ycount = isset($fits_metadata['Jhove']['Y Sampling Frequency'][0]) ? $fits_metadata['Jhove']['Y Sampling Frequency'][0] : '600';
  if ($xcount < 600 || $ycount < 600) {
    $message = t("Ingested image has a sampling frequency of @x by @y per @unit For best results use images of at least 600 by 600 per in.",
        array(
          '@x' => $xcount,
          '@y' => $ycount,
          '@unit' => $unit,
        ));
    drupal_set_message($message, 'warning', FALSE);
  }
}
